name: Build and Deploy Unity Project 🚀

on: 
  push:
    branches: 
      - main
      - master
  pull_request:
    branches: 
      - main
      - master

# Environment variables for Unity Personal License
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  build:
    name: Build Unity WebGL Project ✨
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository with LFS support
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Cache Unity Library to speed up builds
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-WebGL-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-WebGL-
            Library-

      # Build Unity project for WebGL using Personal license
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ env.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ env.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          allowDirtyBuild: true

      # Process Unity template with our custom processor
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Extract repository name for unique routing
      - name: Extract Repository Name
        id: repo_info
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "Repository name: ${REPO_NAME}"
          echo "Will deploy to: https://unreality3d2025.web.app/${REPO_NAME}/"

      # Create repository-specific directory structure
      - name: Prepare Repository Directory
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          echo "Creating directory structure for repository: ${REPO_NAME}"
          
          # Create the repository-specific directory
          mkdir -p "${REPO_NAME}"
          
          # Copy Unity build to repository directory
          if [ -d "build/WebGL/WebGL" ]; then
            cp -r build/WebGL/WebGL/* "${REPO_NAME}/"
            echo "Unity build copied to ${REPO_NAME}/"
          else
            echo "Unity build directory not found"
            ls -la build/ || echo "Build directory structure:"
            find build -type d 2>/dev/null || echo "Build directory not found"
          fi

      # Process template files (if template processor exists)
      - name: Process Unity Template
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          
          if [ -f "unity-template-processor.js" ]; then
            echo "Processing Unity template with repository name: ${REPO_NAME}"
            node unity-template-processor.js \
              --contentId "${REPO_NAME}" \
              --productName "${REPO_NAME}" \
              --buildOutputPath "./${REPO_NAME}/Build"
            
            # Move processed index.html to repository directory
            if [ -f "index.html" ]; then
              mv index.html "${REPO_NAME}/index.html"
              echo "Processed template moved to ${REPO_NAME}/index.html"
            fi
          else
            echo "No template processor found, using build output directly"
            # Ensure index.html exists in repository directory
            if [ ! -f "${REPO_NAME}/index.html" ]; then
              echo "Warning: No index.html found in ${REPO_NAME}/"
              ls -la "${REPO_NAME}/" || echo "Repository directory not found"
            fi
          fi

      # Create standard Firebase configuration for preview channel
      - name: Create Firebase Config
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          
          # Create standard firebase.json (preview channels use standard structure)
          cat > firebase.json << EOF
          {
            "hosting": {
              "public": "${REPO_NAME}",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ],
              "headers": [
                {
                  "source": "**/Build/**",
                  "headers": [
                    {
                      "key": "Cross-Origin-Embedder-Policy",
                      "value": "require-corp"
                    },
                    {
                      "key": "Cross-Origin-Opener-Policy", 
                      "value": "same-origin"
                    },
                    {
                      "key": "Cross-Origin-Resource-Policy",
                      "value": "cross-origin"
                    },
                    {
                      "key": "Cache-Control",
                      "value": "public, max-age=31536000"
                    }
                  ]
                },
                {
                  "source": "**/*.wasm",
                  "headers": [
                    {
                      "key": "Content-Type",
                      "value": "application/wasm"
                    }
                  ]
                },
                {
                  "source": "**/*.data",
                  "headers": [
                    {
                      "key": "Content-Type",
                      "value": "application/octet-stream"
                    }
                  ]
                },
                {
                  "source": "**/*.js",
                  "headers": [
                    {
                      "key": "Content-Type",
                      "value": "application/javascript"
                    }
                  ]
                }
              ]
            }
          }
          EOF
          
          echo "Created firebase.json for preview channel deployment"

      # Upload build artifacts for debugging
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Unity-WebGL-Build-${{ steps.repo_info.outputs.REPO_NAME }}
          path: ${{ steps.repo_info.outputs.REPO_NAME }}
          retention-days: 7

      # Deploy to Firebase Hosting with repository-specific channel
      - name: Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_UNREALITY3D2025 }}
          projectId: unreality3d2025
          # CRITICAL: Use repository name as unique channelId
          channelId: ${{ steps.repo_info.outputs.REPO_NAME }}
          entryPoint: '.'
          expires: 30d
          
      # Output deployment URL with repository-specific preview channel
      - name: Output Deployment Information
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          PREVIEW_URL="${{ steps.deploy.outputs.details_url }}"
          
          echo "🎉 Deployment completed successfully!"
          echo "📱 Repository: ${REPO_NAME}"
          echo "🌐 Your Unity WebGL Preview URL:"
          echo "$PREVIEW_URL"
          echo ""
          echo "📋 Next steps for creators:"
          echo "1. Click the URL above to test your Unity WebGL content"
          echo "2. Use WASD to move, mouse to look around"
          echo "3. Share the URL with others to experience your creation"
          echo "4. Preview expires in 30 days (auto-extends with new deployments)"
          echo ""
          echo "🔄 To update: Push changes to this repository to redeploy automatically"
          
          # Also output to GitHub step summary for easy access
          echo "## 🚀 Unity WebGL Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🎮 Unity WebGL URL:** [$PREVIEW_URL]($PREVIEW_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📱 Repository:** $REPO_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**⏰ Expires:** 30 days (auto-extends with deployments)" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Controls:** WASD to move, mouse to look" >> $GITHUB_STEP_SUMMARY