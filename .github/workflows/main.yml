name: Build and Deploy Unity Project 🚀

on: 
  push:
    branches: 
      - main
      - master
  pull_request:
    branches: 
      - main
      - master

# Environment variables for Unity Personal License
env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  build:
    name: Build Unity WebGL Project ✨
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository with LFS support
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Cache Unity Library to speed up builds
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-WebGL-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-WebGL-
            Library-

      # Build Unity project for WebGL using Personal license
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ env.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ env.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          allowDirtyBuild: true

      # Process Unity template with our custom processor
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Extract repository name for unique routing
      - name: Extract Repository Name
        id: repo_info
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "Repository name: ${REPO_NAME}"

      # Determine deployment environment - CREATORS ALWAYS GET PRODUCTION
      - name: Determine Environment  
        id: env_info
        run: |
          # Check if this is YOUR development repository
          if [[ "${{ github.repository }}" == "unreality3d-platform/u3d-sdk-template" ]] && [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            # Only YOUR template repo can deploy to development on non-main branches
            echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "PROJECT_ID=unreality3d2025" >> $GITHUB_OUTPUT
            echo "SERVICE_ACCOUNT_SECRET=FIREBASE_SERVICE_ACCOUNT_UNREALITY3D2025" >> $GITHUB_OUTPUT
            echo "BASE_URL=unreality3d2025.web.app" >> $GITHUB_OUTPUT
          else
            # All creator repositories and main branch always go to production
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "PROJECT_ID=unreality3d" >> $GITHUB_OUTPUT
            echo "SERVICE_ACCOUNT_SECRET=FIREBASE_SERVICE_ACCOUNT_UNREALITY3D" >> $GITHUB_OUTPUT
            echo "BASE_URL=unreality3d.web.app" >> $GITHUB_OUTPUT
          fi
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Deploying to: ${{ steps.env_info.outputs.ENVIRONMENT }}"
          echo "Will deploy to: https://${{ steps.env_info.outputs.BASE_URL }}/${{ steps.repo_info.outputs.REPO_NAME }}/"

      # Create repository-specific directory structure
      - name: Prepare Repository Directory
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          echo "Creating directory structure for repository: ${REPO_NAME}"
          
          # Create the repository-specific directory
          mkdir -p "${REPO_NAME}"
          
          # Copy Unity build to repository directory
          if [ -d "build/WebGL/WebGL/Build" ]; then
             # Copy Unity WebGL files from the Build subdirectory
             cp -r build/WebGL/WebGL/Build "${REPO_NAME}/"
             echo "Unity build copied to ${REPO_NAME}/Build/" 
             
             # Debug: List what's actually in Build directory
             echo "📁 Contents of ${REPO_NAME}/Build/:"
             ls -la "${REPO_NAME}/Build/" || echo "Build directory listing failed"
          else
            echo "Unity Build directory not found"
            echo "📁 Available in build/WebGL/WebGL/:"
            ls -la build/WebGL/WebGL/ || echo "WebGL directory listing failed"
            find build -name "*.loader.js" -o -name "*.wasm" -o -name "*.data" 2>/dev/null || echo "No Unity files found"
          fi

      # Process template files (if template processor exists)
      - name: Process Unity Template
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          
          if [ -f "unity-template-processor.js" ]; then
            echo "Processing Unity template with repository name: ${REPO_NAME}"
            
            # Copy template processor and template to repository directory
            cp unity-template-processor.js "${REPO_NAME}/"
            cp template.html "${REPO_NAME}/"
            
            # Debug: Check directory contents before processing
            echo "📁 Repository directory contents:"
            ls -la "${REPO_NAME}/" || echo "Repository directory listing failed"
            
            if [ -d "${REPO_NAME}/Build" ]; then
              echo "📁 Build directory contents:"
              ls -la "${REPO_NAME}/Build/" || echo "Build directory listing failed"
            else
              echo "❌ No Build directory found in ${REPO_NAME}/"
            fi
            
            # Change to repository directory and run processor
            cd "${REPO_NAME}"
            
            node unity-template-processor.js \
              --contentId "${REPO_NAME}" \
              --productName "${REPO_NAME}"
            
            echo "Template processing completed - index.html generated"
            
            # Verify the processed file exists
            if [ -f "index.html" ]; then
              echo "✅ Processed index.html created successfully"
            else
              echo "❌ Template processing failed - no index.html generated"
              exit 1
            fi
          else
            echo "No template processor found, using build output directly"
            # Ensure index.html exists in repository directory
            if [ ! -f "${REPO_NAME}/index.html" ]; then
              echo "Warning: No index.html found in ${REPO_NAME}/"
              ls -la "${REPO_NAME}/" || echo "Repository directory not found"
            fi
          fi

      # Create Firebase configuration - FIXED VERSION (No Chrome Warnings)
      - name: Create Firebase Config
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          
          # Create firebase.json with MINIMAL headers (prevents Chrome warnings)
          cat > firebase.json << EOF
          {
            "hosting": {
              "public": "${REPO_NAME}",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ],
              "headers": [
                {
                  "source": "**/*.wasm",
                  "headers": [
                    {
                      "key": "Content-Type",
                      "value": "application/wasm"
                    }
                  ]
                },
                {
                  "source": "**/*.data",
                  "headers": [
                    {
                      "key": "Content-Type",
                      "value": "application/octet-stream"
                    }
                  ]
                },
                {
                  "source": "**/*.js",
                  "headers": [
                    {
                      "key": "Content-Type",
                      "value": "application/javascript"
                    }
                  ]
                }
              ]
            }
          }
          EOF
          
          echo "Created firebase.json with minimal headers (no Chrome warnings)"

      # Upload build artifacts for debugging
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Unity-WebGL-Build-${{ steps.repo_info.outputs.REPO_NAME }}
          path: ${{ steps.repo_info.outputs.REPO_NAME }}
          retention-days: 7

      # Deploy to Firebase Hosting with repository-specific channel
      - name: Deploy to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets[steps.env_info.outputs.SERVICE_ACCOUNT_SECRET] }}
          projectId: ${{ steps.env_info.outputs.PROJECT_ID }}
          # CRITICAL: Use repository name as unique channelId
          channelId: ${{ steps.repo_info.outputs.REPO_NAME }}
          entryPoint: '.'
          expires: 30d

      # Register Project and Generate Professional URLs
      - name: Register Project with Unreality3D
        id: project_registration
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          GITHUB_OWNER="${{ github.repository_owner }}"
          ENVIRONMENT="${{ steps.env_info.outputs.ENVIRONMENT }}"
          BASE_URL="${{ steps.env_info.outputs.BASE_URL }}"
          
          # Only register projects in production environment
          if [[ "$ENVIRONMENT" == "production" ]]; then
            echo "🔄 Registering project with Unreality3D backend..."
            
            # Extract project name from repository name (remove common prefixes)
            PROJECT_NAME=$(echo "$REPO_NAME" | sed 's/^u3d-//' | sed 's/-template$//' | sed 's/^game-//')
            
            # Call Firebase Function to register project
            REGISTRATION_RESPONSE=$(curl -s -X POST \
              "https://${BASE_URL}/registerProject" \
              -H "Content-Type: application/json" \
              -d "{
                \"projectName\":\"$PROJECT_NAME\",
                \"repositoryName\":\"$REPO_NAME\",
                \"githubOwner\":\"$GITHUB_OWNER\",
                \"description\":\"Unity WebGL project deployed from GitHub\"
              }")
            
            echo "Registration response: $REGISTRATION_RESPONSE"
            
            # Parse registration response
            if echo "$REGISTRATION_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
              CREATOR_USERNAME=$(echo "$REGISTRATION_RESPONSE" | jq -r '.creatorUsername')
              FINAL_PROJECT_NAME=$(echo "$REGISTRATION_RESPONSE" | jq -r '.projectName')
              PROFESSIONAL_URL=$(echo "$REGISTRATION_RESPONSE" | jq -r '.professionalUrl')
              AUTO_INCREMENTED=$(echo "$REGISTRATION_RESPONSE" | jq -r '.autoIncremented')
              
              echo "✅ Project registered successfully!"
              echo "👤 Creator: $CREATOR_USERNAME"
              echo "📱 Project: $FINAL_PROJECT_NAME"
              echo "🌐 Professional URL: $PROFESSIONAL_URL"
              
              if [[ "$AUTO_INCREMENTED" == "true" ]]; then
                ORIGINAL_NAME=$(echo "$REGISTRATION_RESPONSE" | jq -r '.originalName')
                echo "🔄 Auto-incremented: $ORIGINAL_NAME → $FINAL_PROJECT_NAME"
              fi
              
              echo "CREATOR_USERNAME=$CREATOR_USERNAME" >> $GITHUB_OUTPUT
              echo "PROJECT_NAME=$FINAL_PROJECT_NAME" >> $GITHUB_OUTPUT
              echo "PROFESSIONAL_URL=$PROFESSIONAL_URL" >> $GITHUB_OUTPUT
              echo "REGISTRATION_SUCCESS=true" >> $GITHUB_OUTPUT
              echo "AUTO_INCREMENTED=$AUTO_INCREMENTED" >> $GITHUB_OUTPUT
            else
              echo "⚠️  Project registration failed or creator not found"
              echo "🔗 Using repository-based URL as fallback"
              
              # Fallback to GitHub-based URL
              echo "CREATOR_USERNAME=$GITHUB_OWNER" >> $GITHUB_OUTPUT
              echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT
              echo "PROFESSIONAL_URL=https://${GITHUB_OWNER}.unreality3d.com/${PROJECT_NAME}/" >> $GITHUB_OUTPUT
              echo "REGISTRATION_SUCCESS=false" >> $GITHUB_OUTPUT
              echo "AUTO_INCREMENTED=false" >> $GITHUB_OUTPUT
            fi
          else
            # Development environment
            echo "CREATOR_USERNAME=$GITHUB_OWNER" >> $GITHUB_OUTPUT
            echo "PROJECT_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
            echo "PROFESSIONAL_URL=Development environment" >> $GITHUB_OUTPUT
            echo "REGISTRATION_SUCCESS=false" >> $GITHUB_OUTPUT
            echo "AUTO_INCREMENTED=false" >> $GITHUB_OUTPUT
          fi

      # Output deployment information with professional URLs
      - name: Output Deployment Information
        run: |
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          ENVIRONMENT="${{ steps.env_info.outputs.ENVIRONMENT }}"
          PROJECT_ID="${{ steps.env_info.outputs.PROJECT_ID }}"
          FIREBASE_PREVIEW_URL="${{ steps.deploy.outputs.details_url }}"
          
          CREATOR_USERNAME="${{ steps.project_registration.outputs.CREATOR_USERNAME }}"
          PROJECT_NAME="${{ steps.project_registration.outputs.PROJECT_NAME }}"
          PROFESSIONAL_URL="${{ steps.project_registration.outputs.PROFESSIONAL_URL }}"
          REGISTRATION_SUCCESS="${{ steps.project_registration.outputs.REGISTRATION_SUCCESS }}"
          AUTO_INCREMENTED="${{ steps.project_registration.outputs.AUTO_INCREMENTED }}"
          
          echo "🎉 Deployment completed successfully!"
          echo "🌍 Environment: ${ENVIRONMENT}"
          echo "📦 Firebase Project: ${PROJECT_ID}"
          echo "📱 Repository: ${REPO_NAME}"
          echo "👤 Creator: ${CREATOR_USERNAME}"
          echo "🎯 Project Name: ${PROJECT_NAME}"
          echo ""
          
          if [[ "$REGISTRATION_SUCCESS" == "true" ]]; then
            echo "✅ Project registered with Unreality3D backend"
            echo "🌐 Your Professional URL:"
            echo "$PROFESSIONAL_URL"
            echo ""
            
            if [[ "$AUTO_INCREMENTED" == "true" ]]; then
              echo "🔄 Project name was auto-incremented to avoid conflicts"
            fi
            
            echo "📋 Professional Features Active:"
            echo "• PayPal monetization enabled"
            echo "• Creator analytics tracking" 
            echo "• Professional SEO-friendly URL"
            echo "• Automatic project management"
            echo "• Professional subdomain routing"
          else
            echo "⚠️  Using fallback URL (creator not registered)"
            echo "🌐 Your URL:"
            echo "$PROFESSIONAL_URL"
            echo ""
            echo "💡 To enable professional features:"
            echo "1. Open Unity → U3D → Setup Tab"
            echo "2. Sign up and reserve your creator username"
            echo "3. Redeploy this repository"
          fi
          
          echo ""
          echo "🔧 Firebase Preview URL (for testing):"
          echo "$FIREBASE_PREVIEW_URL"
          echo ""
          echo "🎮 How to use:"
          echo "• WASD to move, mouse to look around"
          echo "• Share your professional URL with others"
          echo "• URL is permanent and indexed by search engines"
          echo ""
          echo "🔄 To update: Push changes to this repository"
          
          # GitHub step summary
          echo "## 🚀 Unity WebGL Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$REGISTRATION_SUCCESS" == "true" ]]; then
            echo "**🎮 Professional URL:** [$PROFESSIONAL_URL]($PROFESSIONAL_URL)" >> $GITHUB_STEP_SUMMARY
            echo "**✅ Status:** Registered with Unreality3D backend" >> $GITHUB_STEP_SUMMARY
            
            if [[ "$AUTO_INCREMENTED" == "true" ]]; then
              echo "**🔄 Note:** Project name auto-incremented to avoid conflicts" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**🎮 Project URL:** [$PROFESSIONAL_URL]($PROFESSIONAL_URL)" >> $GITHUB_STEP_SUMMARY
            echo "**⚠️ Status:** Fallback URL (register creator for full features)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**👤 Creator:** $CREATOR_USERNAME" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Project:** $PROJECT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**🔧 Firebase Preview:** [$FIREBASE_PREVIEW_URL]($FIREBASE_PREVIEW_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🌍 Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "**📦 Project ID:** $PROJECT_ID" >> $GITHUB_STEP_SUMMARY
          echo "**📱 Repository:** $REPO_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Controls:** WASD to move, mouse to look" >> $GITHUB_STEP_SUMMARY