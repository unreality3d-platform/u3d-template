name: Unity Build and Deploy

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UNITY_VERSION: 2022.3.21f1

jobs:
  build:
    name: Build Unity Project
    runs-on: ubuntu-latest
    
    outputs:
      ENVIRONMENT: ${{ steps.env_info.outputs.ENVIRONMENT }}
      REPO_NAME: ${{ steps.repo_info.outputs.REPO_NAME }}
      
    steps:
      # Environment Detection (Production vs Development)
      - name: Detect Environment
        id: env_info
        run: |
          REPO_NAME="${{ github.repository }}"
          BRANCH_REF="${{ github.ref }}"
          
          echo "Repository: $REPO_NAME"
          echo "Branch: $BRANCH_REF"
          
          # Development: Template repository on feature branches
          if [[ "$REPO_NAME" == "unreality3d-platform/u3d-sdk-template" && "$BRANCH_REF" != "refs/heads/main" ]]; then
            echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
            echo "PROJECT_ID=unreality3d2025" >> $GITHUB_OUTPUT
            echo "SERVICE_ACCOUNT_SECRET=FIREBASE_SERVICE_ACCOUNT_UNREALITY3D2025" >> $GITHUB_OUTPUT
            echo "Deploying to: development"
          # Production: All creator repositories and template main branch
          else
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "PROJECT_ID=unreality3d" >> $GITHUB_OUTPUT
            echo "SERVICE_ACCOUNT_SECRET=FIREBASE_SERVICE_ACCOUNT_UNREALITY3D" >> $GITHUB_OUTPUT
            echo "Deploying to: production"
          fi
      
      # Repository name processing
      - name: Process Repository Info
        id: repo_info
        run: |
          FULL_REPO="${{ github.repository }}"
          REPO_NAME="${FULL_REPO##*/}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "Processed repo name: $REPO_NAME"

      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # Cache Unity Library folder
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ env.UNITY_VERSION }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ env.UNITY_VERSION }}-
            Library-

      # Build Unity project using GameCI
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          buildName: ${{ steps.repo_info.outputs.REPO_NAME }}
          buildsPath: build
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Post-build processing
      - name: Post-Build Processing
        run: |
          BUILD_PATH="build/WebGL/${{ steps.repo_info.outputs.REPO_NAME }}"
          REPO_NAME="${{ steps.repo_info.outputs.REPO_NAME }}"
          
          echo "Build completed. Processing output..."
          
          # Create target directory for deployment
          mkdir -p "$REPO_NAME"
          
          # Copy build output to deployment directory
          if [ -d "$BUILD_PATH" ]; then
            cp -r "$BUILD_PATH"/* "$REPO_NAME"/
            echo "✅ Build files copied to deployment directory"
          else
            echo "❌ Build directory not found: $BUILD_PATH"
            exit 1
          fi
          
          # Check for template processor (unity-template-processor.js)
          if [ -f "unity-template-processor.js" ]; then
            echo "Running Unity template processor..."
            
            # Set up Node.js for template processing
            npm install
            
            # Run template processor
            node unity-template-processor.js
            
            echo "Template processing completed"
            
            # Verify the processed file exists
            if [ -f "index.html" ]; then
              echo "✅ Processed index.html created successfully"
              # Copy processed file to deployment directory
              cp index.html "$REPO_NAME"/
            else
              echo "❌ Template processing failed - no index.html generated"
              exit 1
            fi
          else
            echo "No template processor found, using build output directly"
          fi

      # Upload build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Unity-WebGL-Build-${{ steps.repo_info.outputs.REPO_NAME }}
          path: ${{ steps.repo_info.outputs.REPO_NAME }}
          retention-days: 7

  # Deploy to Firebase
  deploy:
    name: Deploy to Firebase
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Download build artifacts
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Unity-WebGL-Build-${{ needs.build.outputs.REPO_NAME }}
          path: ${{ needs.build.outputs.REPO_NAME }}

      # Create Firebase configuration
      - name: Create Firebase Config
        run: |
          REPO_NAME="${{ needs.build.outputs.REPO_NAME }}"
          
          # Create firebase.json with minimal headers (avoid COEP warnings)
          cat > firebase.json << EOF
          {
            "hosting": {
              "public": "${REPO_NAME}",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "headers": [
                {
                  "source": "**/*.wasm",
                  "headers": [{"key": "Content-Type", "value": "application/wasm"}]
                },
                {
                  "source": "**/*.data", 
                  "headers": [{"key": "Content-Type", "value": "application/octet-stream"}]
                },
                {
                  "source": "**/*.js",
                  "headers": [{"key": "Content-Type", "value": "application/javascript"}]
                }
              ]
            }
          }
          EOF
          
          echo "Firebase configuration created for deployment directory: ${REPO_NAME}"

      # Deploy to Firebase
      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets[needs.build.outputs.SERVICE_ACCOUNT_SECRET] }}'
          projectId: '${{ needs.build.outputs.PROJECT_ID }}'
          channelId: live