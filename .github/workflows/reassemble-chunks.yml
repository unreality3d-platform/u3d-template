# .github/workflows/reassemble-chunks.yml
# Unity WebGL Large File Chunk Reassembly Workflow with Direct GitHub Pages Deployment
# 
# FIXED: Deploys reassembled files directly to GitHub Pages instead of committing to Git
# COMPATIBLE: Works with existing professional URL system

name: Reassemble Unity Chunks

on:
  workflow_dispatch:
    inputs:
      check_for_chunks:
        description: 'Check and reassemble Unity chunk files'
        required: false
        default: 'true'
        type: string

# REQUIRED: Enhanced permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Prevent concurrent deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Reassemble and Prepare for Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Check for chunk files
        id: check_chunks
        run: |
          echo "🔍 Checking for Unity chunk files..."
          
          # Look for both .data.part* and .wasm.part* files
          chunk_files=$(find . -type f \( -name "*.data.part*" -o -name "*.wasm.part*" \))
          
          if [ -n "$chunk_files" ]; then
            echo "📦 Found chunk files:"
            echo "$chunk_files"
            echo "chunks_found=true" >> $GITHUB_OUTPUT
            
            # Count both types of chunks
            chunk_count=$(echo "$chunk_files" | wc -l)
            echo "chunk_count=$chunk_count" >> $GITHUB_OUTPUT
            
            # List unique base files for both types
            base_files=$(echo "$chunk_files" | sed -E 's/\.part[0-9]+$//' | sort -u)
            echo "Base files to reassemble:"
            echo "$base_files"
            
          else
            echo "✅ No chunk files found - repository already has complete files"
            echo "chunks_found=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Reassemble chunk files
        if: steps.check_chunks.outputs.chunks_found == 'true'
        run: |
          echo "🔄 Starting chunk reassembly process..."
          echo "📊 Total chunks found: ${{ steps.check_chunks.outputs.chunk_count }}"
          
          files_reassembled=0
          total_size=0
          
          # Find all unique base files for both .data and .wasm
          base_files=$(find . -type f \( -name "*.data.part*" -o -name "*.wasm.part*" \) | sed -E 's/\.part[0-9]+$//' | sort -u)
          
          for basefile in $base_files; do
            echo ""
            echo "📦 Processing: $basefile"
            
            # Find all parts for this EXACT file path (not just basename)
            parts=$(find . -type f -name "$(basename "$basefile").part*" | sort -V)
            part_count=$(echo "$parts" | wc -w)
            
            if [ $part_count -eq 0 ]; then
              echo "⚠️ No parts found for $basefile"
              continue
            fi
            
            echo "🔍 Found $part_count parts for $(basename "$basefile"):"
            for part in $parts; do
              echo "  - $part"
            done
            
            # Verify all parts exist and are readable
            all_parts_valid=true
            for part in $parts; do
              if [ ! -f "$part" ] || [ ! -r "$part" ]; then
                echo "❌ Part not accessible: $part"
                all_parts_valid=false
                break
              fi
            done
            
            if [ "$all_parts_valid" = false ]; then
              echo "❌ Skipping $basefile due to missing/invalid parts"
              continue
            fi
            
            # Calculate total size of parts
            part_size=0
            for part in $parts; do
              size=$(stat -c%s "$part" 2>/dev/null || echo "0")
              part_size=$((part_size + size))
            done
            
            echo "📏 Total size of parts: $(echo $part_size | awk '{printf "%.2f MB", $1/1024/1024}')"
            
            # Reassemble with verification
            echo "🔧 Reassembling $basefile..."
            
            {
              cat $parts > "$basefile.tmp"
            } || {
              echo "❌ Failed to concatenate parts for $basefile"
              continue
            }
            
            # Verify reassembled file size
            reassembled_size=$(stat -c%s "$basefile.tmp" 2>/dev/null || echo "0")
            
            if [ "$reassembled_size" -eq "$part_size" ]; then
              # Move to final location
              mv "$basefile.tmp" "$basefile"
              
              echo "✅ Successfully reassembled $basefile"
              echo "📏 Final size: $(echo $reassembled_size | awk '{printf "%.2f MB", $1/1024/1024}')"
              
              files_reassembled=$((files_reassembled + 1))
              total_size=$((total_size + reassembled_size))
              
              # Remove chunk files after successful reassembly
              for part in $parts; do
                rm "$part"
                echo "🗑️ Removed chunk: $(basename "$part")"
              done
              
            else
              echo "❌ Size mismatch for $basefile (expected: $part_size, got: $reassembled_size)"
              rm -f "$basefile.tmp"
            fi
          done
          
          echo ""
          echo "📊 Reassembly Summary:"
          echo "   🔧 Files reassembled: $files_reassembled"
          echo "   📦 Total size: $(echo $total_size | awk '{printf "%.2f MB", $1/1024/1024}')"
          
          if [ $files_reassembled -eq 0 ]; then
            echo "⚠️ No files were reassembled - check logs for errors"
            exit 1
          fi
          
      - name: Verify Unity WebGL structure
        if: steps.check_chunks.outputs.chunks_found == 'true' || steps.check_chunks.outputs.chunks_found == 'false'
        run: |
          echo "🔍 Verifying Unity WebGL file structure..."
          
          unity_files_found=0
          
          if find . -name "*.data" -type f | head -1 > /dev/null; then
            data_files=$(find . -name "*.data" -type f | wc -l)
            echo "✅ Found $data_files .data file(s)"
            unity_files_found=$((unity_files_found + 1))
          else
            echo "❌ No .data files found"
          fi
          
          if find . -name "*.wasm" -type f | head -1 > /dev/null; then
            wasm_files=$(find . -name "*.wasm" -type f | wc -l)
            echo "✅ Found $wasm_files .wasm file(s)"
            unity_files_found=$((unity_files_found + 1))
          else
            echo "❌ No .wasm files found"
          fi
          
          if find . -name "*.framework.js" -type f | head -1 > /dev/null; then
            echo "✅ .framework.js file found"
            unity_files_found=$((unity_files_found + 1))
          fi
          
          if find . -name "*.loader.js" -type f | head -1 > /dev/null; then
            echo "✅ .loader.js file found"
            unity_files_found=$((unity_files_found + 1))
          fi
          
          if [ -f "index.html" ]; then
            echo "✅ index.html file found"
            unity_files_found=$((unity_files_found + 1))
          fi
          
          echo ""
          echo "📊 Unity WebGL files found: $unity_files_found/5"
          
          if [ $unity_files_found -ge 3 ]; then
            echo "✅ Unity WebGL structure appears complete"
          else
            echo "⚠️ Unity WebGL structure may be incomplete"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  # NEW: Separate deploy job for GitHub Pages
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Final status report
        run: |
          echo ""
          echo "📋 GitHub Pages Deployment Complete"
          echo "================================="
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📦 Deployment ID: ${{ steps.deployment.outputs.deployment_id }}"
          echo ""
          echo "🎮 Unity WebGL build is now live!"
          echo "🔗 Professional URL will be available at:"
          echo "https://$(echo ${{ github.repository }} | cut -d'/' -f1).unreality3d.com/$(echo ${{ github.repository }} | cut -d'/' -f2)/"
          echo ""
          echo "✅ Large files deployed successfully without Git storage"